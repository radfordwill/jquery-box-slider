{"name":"Adaptor","tagline":"An extensible jQuery content slider","body":"All credit goes to Phil Parsons.\r\n\r\nGoing to try to update the animations to encompass IE9+ support. Currently, the 3D transitions crash in IE10. Slowly but hopefully steadily, I'm going to modify the way the function uses transforms for IE9+. At the least I will degrade the 3d transitions for IE10. Wish me luck!\r\n\r\n-Will Radford radford.will@gmail.com\r\n\r\nAdaptor is a light-weight content slider that aims to provide a simple\r\ninterface for developers to create cool 2D or 3D slide animation transitions.\r\n\r\nSupport\r\n---\r\n\r\nCurrently, I've only added 3D support for webkit and Firefox, all other browsers\r\nwill fallback gracefully to a simple fade transition when using the 3D effects.\r\n\r\nAll 2D slide transitions have been tested in IE6+ and all other modern browsers.\r\n\r\nUsage\r\n---\r\n\r\nCreate a view port for the 3D perspective and within that add the HTML to create\r\na box containing slides of content.\r\n\r\n```html\r\n<div class=\"slider-viewport\"><!-- works as a viewport for the 3D transitions -->\r\n  <div id=\"content-box\"><!-- the 3d box -->\r\n    <figure><!-- slide -->\r\n      <img src=\"img/slide-1.png\">\r\n      <figcaption>This is slide one's description</figcaption>\r\n    </figure>\r\n    <figure>\r\n      <img src=\"img/slide-2.png\">\r\n      <figcaption>This is slide two's description</figcaption>\r\n    </figure>\r\n    <figure>\r\n      <img src=\"img/slide-3.png\">\r\n      <figcaption>This is slide three's description</figcaption>\r\n    </figure>\r\n    <figure class=\"slide\">\r\n      <img src=\"img/slide-4.png\">\r\n      <figcaption>This is slide four's description</figcaption>\r\n    </figure>\r\n  </div>\r\n</div>\r\n```\r\n\r\nTechnically no CSS is required but if the outer box `div.slider-viewport` is\r\nstatically positioned the plugin will apply relative positioning to it so that\r\nit can hold the absolutely positioned box. It should be noted that the viewport\r\nand box should be the same width and height as the content slides so that the\r\nrotation does not appear off center. It is also a good idea to constrain the\r\nsize of the viewport so that the slides don't spew down the page at load time.\r\n\r\n```css\r\n/* overfow will get set to visible on initialisation of the plugin */\r\n.slider-viewport { width: 560px; height: 380px; overflow: hidden }\r\n```\r\n\r\nInclude the `box-slider.jquery.js` (this one first) and the desired effect\r\nscripts (these second) in your page and then on page load the usual jQuery\r\nsugaryness applies...\r\n\r\n```javascript\r\n$('#content-box').boxSlider( /* options */ );\r\n```\r\n\r\nOptions\r\n---\r\n\r\n* `speed (default: 800)` The time interval in milliseconds within which the\r\n  slide animation will complete\r\n* `autoscroll (default: false)` Set true to automatically transition through\r\n  the slides\r\n* `timeout (default: 5000)` The time interval between slide transitions. For use\r\n  with autoscroll\r\n* `pause (default: null)` A DOM element, jQuery object or selector for an element\r\n  that when clicked will toggle the autoscoll state of the slider. When the slider\r\n  is in a paused state the element will be applied a class name of paused\r\n* `pauseOnHover (default: false)` Pause an auto-scrolling slider when the users\r\n  mouse hovers over it. For use with autoscroll\r\n* `next (default: null)` A DOM element, jQuery object or selector for an element\r\n  that when clicked will advance the slider to the next slide\r\n* `prev (default: null)` A DOM element, jQuery object or selector for an element\r\n  that when clicked will advance the slider to the previous slide\r\n* `effect (default: 'scrollVert3d')` The slide animation effect to use when\r\n  scrolling through content slides\r\n\r\n\r\nEffect options\r\n---\r\n\r\n### `srollVert3d,scrollHorz3d`\r\n\r\n* `perspective (default: 1000)` The 3D perspective at which the content slides\r\n  are placed from the view port during transition\r\n\r\nMethods\r\n---\r\n\r\n### `showSlide`\r\n\r\nShows a slide at the specified index starting from 0\r\n\r\n```javascript\r\n$('#content-box').boxSlider('showSlide', 3); // show 4th slide\r\n```\r\n### `playPause`\r\n\r\nStart autoScrolling a slideshow or pause an already running slideshow\r\n\r\n```javascript\r\n$('#content-box').boxSlider('playPause');\r\n```\r\n\r\n### `option`\r\n\r\nGet or set a specific option\r\n\r\n```javascript\r\n$('#content-box').boxSlider('option', 'speed'); // returns speed option value\r\n$('#content-box').boxSlider('option', 'speed', 1200); // sets the speed option to 1200\r\n```\r\n\r\n### `destroy`\r\n\r\nDestroys the plugin for the selected sliders\r\n\r\n```javascript\r\n$('#content-box').boxSlider('destroy');\r\n```\r\n\r\n### `next`\r\n\r\nMoves the slider to the next slide\r\n\r\n```javascript\r\n$('#content-box').boxSlider('next');\r\n```\r\n\r\n### `prev`\r\n\r\nMoves the slider to the previous slide\r\n\r\n```javascript\r\n$('#content-box').boxSlider('prev');\r\n```\r\n\r\nEvents\r\n---\r\n\r\n### `onbefore`\r\n\r\nFires before each slide transition starts. The function parameter will be bound\r\nto the jQuerified box and will receive the current slide as it's first parameter,\r\nthe next slide as its second, the current slide index as it's third and the next\r\nslide index as it's last.\r\n\r\n```javascript\r\n$('#content-box').boxSlider('option', 'onbefore', function ($currentSlide, $nextSlide, currIndex, nextIndex) {\r\n  // 'this' is effectively $('#content-box')\r\n});\r\n```\r\n\r\n### `onafter`\r\n\r\nFires after each slide transition is complete. The function parameter will be bound\r\nto the jQuerified box and will receive the previous slide as it's first parameter,\r\nthe next slide as its second, the current slide index as it's third and the next\r\nslide index as it's last.\r\n\r\n```javascript\r\n$('#content-box').boxSlider('option', 'onafter', function ($previousSlide, $currentSlide, currIndex, nextIndex) {\r\n  // 'this' is effectively $('#content-box')\r\n});\r\n```\r\n\r\nEffects\r\n---\r\nThe animation effects come as adaptors that are registered with the main box slider plugin\r\nusing the `registerAnimator` method in one of the following ways. If the adaptor supports\r\nmore than one animation effect then these must be passed in as a comma separated list.\r\n\r\n```javascript\r\n$.fn.boxSlider('registerAnimator', 'effectName', AnimatorObject); // on $.fn\r\nwindow.jqBoxSlider.registerAnimator('effect1,effect2' AnimatorObject); // on the global alias\r\n```\r\nSlide animators must implement the following interface and adhere to some fundamental rules.\r\n\r\n### `configure(Boolean supports3D, String vendorPrefix)`\r\n\r\nThis method is optional and is called during the adaptor registration process. The `supports3D`\r\nparameter identifies whether the host browser supports 3D CSS transformations and the `vendorPrefix`\r\nparameter provides the host browser CSS vendor prefix if it exists, e.g `'-moz-'`, `'-webkit-'`.\r\n\r\n```javascript\r\nadaptor.configure = function (supports3D, vendorPrefix) {\r\n  // implementation omitted\r\n};\r\n```\r\n\r\n### `initialize(jQuery $box, jQuery $slides, Object settings)`\r\n\r\nThis method is required and sets up the initial state of each content slider. The first parameter\r\n`$box` is the jQuery content sliders main box (the selected element when the plugin is initialised), the\r\nsecond parameter is the jQuery `$slides` object containing all of the individual slide elements and\r\nthe third parameter `settings` is the settings for the current content slider.\r\n\r\n```javascript\r\nadaptor.initialize = function ($box, $slides, settings) {\r\n  // implementation omitted\r\n};\r\n```\r\n\r\nDuring the initialisation process you may set the `_slideFilter` attribute on `settings` which will\r\nbe used to filter the set of slides (`$slides`) before the transition takes place. An example of this\r\ncan be seen in the `box-slider-fx-blinds.js` adaptor. This filter uses the jQuery filter method but\r\nif you pass a function then that function will be bound to the unfiltered `$slides` jQuery object and will\r\nrecieve the index as the first paramter and the plugin settings as the second.\r\n\r\n```javascript\r\nadaptor.initialize = function ($box, $slides, settings) {\r\n  // implementation omitted\r\n\r\n  settings._slideFilter = function (index, settings) {\r\n    return this.get(index) !== settings.$blinds; // 'this' will be $slides\r\n  }\r\n};\r\n```\r\n\r\n### `transition(Object settings)`\r\n\r\nThis method is required and completes the transition from the current slide to the next slide.\r\nThe `settings` parameter is the plugin settings for the content slider extended with the following.\r\n\r\n```javascript\r\n{\r\n    $box: // jQuery object containing the content slider box\r\n  , $slides: // jQuery object containing all of the content slides\r\n  , $currSlide: // jQuery object containing the current visible slide\r\n  , $nextSlide: // jQuery object containing the next slide to show\r\n  , reverse: // the direction in which to travel (read forwards, backwards)\r\n  , currIndex: // the index at which $currSlide resides within $slides\r\n  , nextIndex: // the index at which $nextSlide resides within $slides\r\n}\r\n```\r\n\r\nThis method must support browsers that do not support 3D transformations by degrading gracefully to\r\nsome other method of transitioning the slides. Any settings that need to be cached against the\r\ncontent slider for the next transition should be returned as a simple object which will be mixed\r\ninto the plugin settings.\r\n\r\n```javascript\r\nadaptor.transition = function (settings) {\r\n  // move to the next previous slides\r\n  return { mycustomsetting: 'value' };\r\n};\r\n```\r\n\r\n### `reset(jQuery $box, Object settings)`\r\n\r\nThis method is optional and provides a method to reset the state of the plugin when an option is updated\r\nor the plugin is re-initialised. The first parameter `$box` is the content slider and the second `settings`\r\nis the options for the content slider.\r\n\r\n```javascript\r\nadaptor.reset($box, settings) {\r\n  // reset the content slider's state\r\n}\r\n```\r\n\r\n### `destroy(jQuery $box, Object settings)`\r\n\r\nThis method is required and handles the clean up required to return the\r\nelement contained in the `$box` jQuery object back to it's original state\r\nbefore `initialize` was called. Any additional settings applied to `settings`\r\nshould also be removed.\r\n\r\n```javascript\r\nadaptor.destroy = function ($box, settings) {\r\n  // reset css and remove any additional settings\r\n};\r\n```\r\n\r\n### `_cacheOriginalCSS(jQuery $el, String name, Object settings, Array extraAttributes)`\r\n\r\nYou do not need to define this method as it will be applied to the animation adaptor at\r\nthe time it is registered with the plugin through the call to `registerAnimator`. This\r\nmethod will cache the original CSS of the given jQuery object in the\r\n`bssettings` data set for the slider, the `settings` object passed to all of the adaptor\r\nfunctions, so that the original CSS may be applied when the plugin is destroyed or reset.\r\nBy default the following CSS attributes are cached `position, top, left, display, overflow, width, height`.\r\nAny additional attributes should be passed in as an array or strings in the `extraAttributes` parameter.\r\n\r\n```javascript\r\nadaptor.initialize = function ($box, $slides, settings) {\r\n  // cache the original css for reset or destroy\r\n  adaptor._cacheOriginalCSS($box, 'box', settings);\r\n  adaptor._cacheOriginalCSS($slides, 'slides', settings, [\r\n      vendorPrefix + 'transform'\r\n    , vendorPrefix + 'transition'\r\n  ]);\r\n\r\n  // implementation omitted\r\n}\r\n```\r\n\r\nThe cached CSS will then be available on the slider settings via the\r\n`origCSS` object under the item `name` provided when `_cacheOriginalCSS`\r\nwas called.\r\n\r\n```javascript\r\nadaptor.destroy = function ($box, settings) {\r\n  // reset the original css\r\n  $box.children().css(settings.origCSS.slides);\r\n  $box.css(settings.origCSS.box);\r\n};\r\n```\r\n\r\n### Example adaptor\r\n\r\nBelow is an example of a simple 2D fade transition registered with the plugin\r\nas the `fade` effect.\r\n\r\n```javascript\r\n;(function (w, $, undefined) {\r\n\r\n  w.jqBoxSlider.registerAnimator('fade', (function () {\r\n\r\n    var adaptor = {};\r\n\r\n    // setup slide and box css\r\n    adaptor.initialize = function ($box, $slides, settings) {\r\n      // cache the original css for reset or destroy\r\n      adaptor._cacheOriginalCSS($box, 'box', settings);\r\n      adaptor._cacheOriginalCSS($slides, 'slides', settings);\r\n\r\n      if ('static auto'.indexOf($box.css('position')) !== -1) {\r\n        $box.css('position', 'relative');\r\n      }\r\n\r\n      $box.css({height: $slides.eq(0).height(), overflow: 'hidden'});\r\n      $slides\r\n        .css({ position: 'absolute', top: 0, left: 0 })\r\n        .filter(':gt(0)').hide();\r\n    };\r\n\r\n    // fade current out and next in\r\n    adaptor.transition = function (settings) {\r\n      settings.$nextSlide.fadeIn(settings.speed);\r\n      settings.$currSlide.fadeOut(settings.speed);\r\n    };\r\n\r\n    // reset the original css\r\n    adaptor.destroy = function ($box, settings) {\r\n      $box.children().css(settings.origCSS.slides);\r\n      $box.css(settings.origCSS.box);\r\n    };\r\n\r\n    return adaptor;\r\n\r\n  }()));\r\n\r\n}(window, jQuery || Zepto));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}